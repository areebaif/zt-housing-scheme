// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://planetscale.com/docs/tutorials/automatic-prisma-migrations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum Status {
  not_sold
  partially_paid
  fully_paid
  registry_transferred
}

enum PaymentType {
  down_payment
  development_charge
  installment
  other
}

model Plot {
  id Int @id
  dimension String? @db.VarChar(255)
  square_feet Int?
  sale_id Int?
  sale_price Int?
  fully_sold_date DateTime?
  created_at DateTime @default(now())
  updated_at DateTime  @updatedAt
  plot_status Status
}


model Sale {
  id Int @id
  customer_id Int
  sold_date DateTime
  total_sale_price Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Customer {
  id Int @id @default(autoincrement())
  name String  @db.VarChar(255)
  son_of String?  @db.VarChar(255)
  phone_number String
  address String?
  cnic String @unique  @db.VarChar(15)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Payment_Plan {
  id Int @id @default(autoincrement())
  payment_type PaymentType
  sale_id Int
  payment_date DateTime?
  payment_value Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Payments {
  id Int @id @default(autoincrement())
  description String? 
  payment_type PaymentType
  sale_id Int
  payment_date DateTime
  payment_value Int
  created_at DateTime @default(now())
}

enum RegistryStatus {
  waiting_government_approval
  registry_ready_for_customer
  registry_transferred_to_customer
}

model Sale_Registry {
  id Int @id @default(autoincrement())
  plot_id Int
  created_at DateTime @default(now())
  registry_status RegistryStatus
  customer_id Int?
  registry_given_to_name String?
  registry_given_to_son_of String?
  registry_given_to_cnic String?
  registry_given_to_phone String?
  registry_ready_for_customer_date DateTime?
  registry_transferred_to_customer DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id            Int @id @default(autoincrement())
  //name          String?
  email         String?   @unique
  emailVerified DateTime?
  //image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}